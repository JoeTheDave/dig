generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Game {
  id              String   @id @default(cuid())
  status          String   @default("waiting") // waiting, playing, finished
  currentTurn     Int      @default(0)
  actionsThisTurn Int      @default(0) // track actions taken this turn
  playerCount     Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  players         Player[]
  bones           Bone[]
  bowls           Bowl[]
  yardCards       YardCard[]
}

model Player {
  id           String @id @default(cuid())
  gameId       String
  name         String
  icon         String // dog head icon identifier
  position     Int    // 0-3 for player order
  yardPosition Int    @default(0) // position in the yard
  score        Int    @default(0)
  bonesInHand  Bone[] @relation("PlayerHand")
  buriedBones  Bone[] @relation("BuriedBones")
  game         Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
}

model Bone {
  id            String  @id @default(cuid())
  gameId        String
  color         String  // red, blue, green, yellow, purple (actual color)
  uncertainColor String // the alternative color shown on uncertain side
  position      Int?    // position in yard (null if in hand or bowl)
  inBowl        Boolean @default(false)
  revealed      Boolean @default(false) // true if actual color has been revealed
  playerId      String? // if in player's hand
  buriedByPlayerId String? // tracks which player buried this bone
  game          Game    @relation(fields: [gameId], references: [id], onDelete: Cascade)
  player        Player? @relation("PlayerHand", fields: [playerId], references: [id])
  buriedByPlayer Player? @relation("BuriedBones", fields: [buriedByPlayerId], references: [id])
}

model Bowl {
  id       String @id @default(cuid())
  gameId   String
  color    String // red, blue, green, yellow, purple
  position Int    // distance from dog house (0 = closest)
  value    Int    // 5, 4, 3, 2, 1 based on position
  game     Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
}

model YardCard {
  id       String @id @default(cuid())
  gameId   String
  position Int    // position in the yard
  type     String // "bone", "bowl", "doghouse"
  color    String? // for bones and bowls
  game     Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
}